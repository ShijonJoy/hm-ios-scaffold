// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;

SWIFT_CLASS("_TtC5HMKit11Certificate")
@interface Certificate : NSObject <NSCoding>
/// The certificate’s data in binary format, without the signature
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable certificateData;
/// The certificate’s signature
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable signature;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull bytes;
/// Checks the certificate’s signature
/// \param CAPublicKey The public key that the signature is checked with
///
///
/// returns:
/// True if the signature is valid for the provided public key
- (BOOL)isSignatureValidWithCAPublicKey:(NSArray<NSNumber *> * _Nonnull)CAPublicKey SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5HMKit17AccessCertificate")
@interface AccessCertificate : Certificate
/// The device’s, that is gaining access, serial number
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull gainingSerial;
/// The device’s, that is gaining access, public key
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull gainingPublicKey;
/// The device’s, that is providing access, public key
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull providingSerial;
/// The Certificate’s validity start date
@property (nonatomic, readonly, copy) NSDate * _Nonnull startDate;
/// The Certificate’s validity end date
@property (nonatomic, readonly, copy) NSDate * _Nonnull endDate;
/// The Certificate is expired if endDate is before today.
@property (nonatomic, readonly) BOOL isExpired;
/// The Certificate’s permissions
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable permissions;
/// The Certificate’s signature
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable signature;
/// The certificate data in binary format, without the signature
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable certificateData;
- (nullable instancetype)initWithGainerSerial:(NSArray<NSNumber *> * _Nonnull)gainerSerial gainingPublicKey:(NSArray<NSNumber *> * _Nonnull)gainingPublicKey providingSerial:(NSArray<NSNumber *> * _Nonnull)providingSerial startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate permissions:(NSArray<NSNumber *> * _Nonnull)permissions;
- (nullable instancetype)init:(NSArray<NSNumber *> * _Nonnull)bytes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AccessCertificate (SWIFT_EXTENSION(HMKit))
@end


@class DeviceCertificate;

SWIFT_CLASS("_TtC5HMKit6Device")
@interface Device : NSObject
/// Wheter the bluetooth data encryption is enabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isEncryptionEnabled;)
+ (BOOL)isEncryptionEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsEncryptionEnabled:(BOOL)value;
/// The Device Certificate.
@property (nonatomic, readonly, strong) DeviceCertificate * _Nullable certificate;
/// The identifier at the end of the name
@property (nonatomic, readonly, copy) NSString * _Nonnull nameIdentifier;
/// The name of the device. The identifier is encoded into this.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Device Certificate is used to recognize a valid device.
/// Certificate binary format
/// <ul>
///   <li>
///     Bytes[0 to 4]: Issuer (4 bytes)
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Bytes[4 to 16]: App ID (12 bytes)
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Bytes[16 to 25]: Device serial (9 bytes)
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Bytes[25 to 89]: Device Public Key ( 64 bytes)
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Bytes[89 to 153]: CA Signature ( 64 bytes)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC5HMKit17DeviceCertificate")
@interface DeviceCertificate : Certificate
/// The certificate issuer’s identifier
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable issuer;
/// The certificate’s app identifier
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable appIdentifier;
/// The serial number of the device
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable serial;
/// The public key of the device
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable publicKey;
/// The Certificate’s signature
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable signature;
/// The certificate’s data in binary format, without the signature
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable certificateData;
- (nullable instancetype)initWithIssuer:(NSArray<NSNumber *> * _Nonnull)issuer appID:(NSArray<NSNumber *> * _Nonnull)appID serial:(NSArray<NSNumber *> * _Nonnull)serial publicKey:(NSArray<NSNumber *> * _Nonnull)publicKey;
- (nullable instancetype)init:(NSArray<NSNumber *> * _Nonnull)bytes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC5HMKit14ExternalDevice")
@interface ExternalDevice : Device
/// The signal strength’s logarithmic value, from the underlying CBPeripheral.
@property (nonatomic, readonly) NSInteger rssi;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface ExternalDevice (SWIFT_EXTENSION(HMKit))
@end


@interface ExternalDevice (SWIFT_EXTENSION(HMKit))
@end


@interface ExternalDevice (SWIFT_EXTENSION(HMKit))
/// Connect to the device to send commands and enable other functionality.
/// \param withResponse The block that will be evoked when the connection process has finished.
///
- (void)connectWithResponse:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Disconnect from the device.
/// Disconnect after communication with the device is finished, and you’re not expecting any commands, to avoid leaving the external device in an unknown state.
/// \param withResponse The block that will be evoked when the disconnection process has finished.
///
- (void)disconnectWithResponse:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Get a random nonce from the device.
/// \param withResponse The bloc that will be evoked when getting the nonce has finished. Contains the nonce’s bytes, or an error.
///
- (void)getNonceWithResponse:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))response;
/// Get the device’s certificate.
/// On success, the certificate is stored in the <em>certificate</em> variable.
/// \param response The block that will be evoked when the command has finished.
///
- (void)getDeviceCertificateWithResponse:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Get the device’s certificate.
/// On success, the certificate is stored in the <em>certificate</em> variable.
/// \param nonce The nonce that is used to ask the certificate.
///
/// \param signature The signature, from Certificate Authority, for the nonce.
///
/// \param response The block that will be evoked when the command has finished.
///
- (void)getDeviceCertificateWithNonce:(NSArray<NSNumber *> * _Nonnull)nonce signature:(NSArray<NSNumber *> * _Nonnull)signature response:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Register an access certificate to the device.
/// \param certificate The access certificate that is sent to the device.
///
/// \param response The block that will be evoked when the command has finished.
///
- (void)registerCertificate:(AccessCertificate * _Nonnull)certificate response:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Authenticate with the device.
/// Authentication is required to access certain functionality.
/// precondition:
/// Device certificate has to be set <code>manually</code>, or by calling <code>getDeviceCertificate()</code>, before authenticating.
/// \param response The block that will be evoked when authenticating has finished.
///
- (void)authenticateWithResponse:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Store a certificate to the device.
/// Used to save certificates to an external device, so that other devices connecting to it, can authenticate or ask for the certificate.
/// This should be thought of as saving the certificate to a database for other devices to read.
/// precondition:
/// Must be <em>authenticated</em>.
/// \param certificate The certificate that will be stored on the device.
///
/// \param response The block that will be evoked when storing has finished.
///
- (void)storeCertificate:(AccessCertificate * _Nonnull)certificate response:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Get an access certificate.
/// Used to retrieve an access certificate stored on an external device.
/// precondition:
/// Must be <em>authenticated</em>.
/// \param serial The serial number of the access provider, 9 bytes.
///
/// \param response The block that will be evoked when the command has finished.
///
- (void)getAccessCertificateWithSerial:(NSArray<NSNumber *> * _Nonnull)serial response:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))response;
/// Send command inside a secure container.
/// precondition:
/// Must be <em>authenticated</em>.
/// \param bytes The bytes sent to the device.
///
/// \param secureResponse The flag noting if the response has an integrity check, defaults to <em>true</em>. Usually set to <em>false</em> for unsecure quick data transmissions, eg. real time heart rate signal.
///
/// \param response The block that will be evoked when the command has finished.
///
- (void)sendCommandWithBytes:(NSArray<NSNumber *> * _Nonnull)bytes secureResponse:(BOOL)secureResponse response:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))response;
/// Revoke a registered certificate from the device.
/// Deletes the registered certificate, along with it’s accompanying stored certificates, from the device’s storage.
/// precondition:
/// Must be <em>authenticated</em>.
/// \param serial The serial number of the access provider, 9 bytes.
///
/// \param response The block that will be evoked when the revoking has finished.
///
- (void)revokeCertificateWithSerial:(NSArray<NSNumber *> * _Nonnull)serial response:(void (^ _Nonnull)(NSError * _Nullable))response;
/// Reset the device.
/// All registered and stored certificates will be deleted.
/// precondition:
/// Must be <em>authenticated</em>.
/// \param response The block that will be evoked when the reset has finished.
///
- (void)resetWithResponse:(void (^ _Nonnull)(NSError * _Nullable))response;
@end


SWIFT_CLASS("_TtC5HMKit11LocalDevice")
@interface LocalDevice : Device
/// Singleton access for the LocalDevice
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LocalDevice * _Nonnull sharedDevice;)
+ (LocalDevice * _Nonnull)sharedDevice SWIFT_WARN_UNUSED_RESULT;
/// The certificates that are registered to the LocalDevice
@property (nonatomic, readonly, copy) NSArray<AccessCertificate *> * _Nonnull registeredCertificates;
/// The certificates that are stored to the LocalDevice
@property (nonatomic, readonly, copy) NSArray<AccessCertificate *> * _Nonnull storedCertificates;
/// Used for letting the connected device know <em>in super-short time-intervals</em>, that this device is still connected
@property (nonatomic) BOOL isAlivePingActive;
/// If the broadcasting filter has been set
/// seealso:
///
/// <ul>
///   <li>
///     <code>clearBroadcastingFilter()</code>
///   </li>
///   <li>
///     <code>isBroadcastingFilterActive</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isBroadcastingFilterActive;
/// Set the device certificate and private key before using any other functionality
/// \param certificate The device certificate
///
/// \param privateKey 32 byte private key with elliptic curve Prime 256v1
///
/// \param CAPublicKey 64 byte public key of the Certificate Authority
///
- (void)setDeviceCertificate:(DeviceCertificate * _Nonnull)certificate privateKey:(NSArray<NSNumber *> * _Nonnull)privateKey CAPublicKey:(NSArray<NSNumber *> * _Nonnull)CAPublicKey;
/// Initialise the LocalDevice with essential values before using any other functionality.
/// \param deviceCertificate The device’s certificate in base64
///
/// \param devicePrivateKey The device’s private key in base64, 32 bytes, using elliptic curve p256
///
/// \param issuerPublicKey The issuer’s public key in base64 , 64 bytes
///
///
/// throws:
/// <em>LinkError.internalError</em> when the device cert couldn’t be created from the input, or the keys are not the correct length
- (BOOL)initialiseWithDeviceCertificate:(NSString * _Nonnull)deviceCertificate devicePrivateKey:(NSString * _Nonnull)devicePrivateKey issuerPublicKey:(NSString * _Nonnull)issuerPublicKey error:(NSError * _Nullable * _Nullable)error;
/// Start broadcasting the LocalDevice via BLE advertising.
///
/// throws:
/// A <em>LinkError</em> relating to bluetooth problems
- (BOOL)startBroadcastingAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop broadcasting the LocalDevice
- (void)stopBroadcasting;
/// Stops broadcasting, removes the services (thus disconnecting from centrals) and clears the links from the memory.
- (void)disconnectAll;
/// Adds a registered Certificate to Device’s storage
/// \param certificate The certificate that can be used by the Device to verify authorized Links.
///
///
/// throws:
/// Error if the certificate is invalid or storage is full
- (BOOL)registerCertificate:(AccessCertificate * _Nonnull)certificate error:(NSError * _Nullable * _Nullable)error;
/// Stores a Certificate to Device’s storage. This certificate is usually read by other Devices.
/// \param certificate The certificate that will be stored.
///
- (void)storeCertificate:(AccessCertificate * _Nonnull)certificate;
/// Revokes a stored certificate from Device’s storage. The stored certificate and its accompanying registered certificate are deleted from the storage.
/// \param serial The 9-byte serial number of the access provider.
///
///
/// returns:
/// False if the certificates do not exist.
- (BOOL)revokeCertificateWithSerial:(NSArray<NSNumber *> * _Nonnull)serial SWIFT_WARN_UNUSED_RESULT;
/// Resets the LocalDevice’s storage and stops broadcasting.
- (void)reset;
/// Resets the LocalDevice’s storage.
- (void)resetStorage;
/// Clears the bluetooth advertisment filter
/// When the device is already broadcasting, it needs to be stopped and started again.
/// seealso:
///
/// <ul>
///   <li>
///     <code>isBroadcastingFilterActive</code>
///   </li>
///   <li>
///     <code>setBroadcastingFilter(vehicleSerial:)</code>
///   </li>
/// </ul>
- (void)clearBroadcastingFilter;
/// Set the bluetooth advertisment filter
/// This sets the advertisment data to contain vehicle serial,
/// for the scanning device to find it more easily among many.
/// When the device is already broadcasting, it needs to be stopped and started again.
/// seealso:
///
/// <ul>
///   <li>
///     <code>clearBroadcastingFilter()</code>
///   </li>
///   <li>
///     <code>isBroadcastingFilterActive</code>
///   </li>
/// </ul>
/// \param vehicleSerial The vehicle’s serial, that should find this device.
///
- (void)setBroadcastingFilterWithVehicleSerial:(NSData * _Nonnull)vehicleSerial;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSURLSession (SWIFT_EXTENSION(HMKit))
@end

#pragma clang diagnostic pop
